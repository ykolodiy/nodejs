/* eslint-disable no-shadow */
/* eslint-disable no-console */
/* eslint-disable no-unused-vars */
// TUTORIAL https://github.com/mscdex/node-imap
// https://github.com/accakks/Sending-and-Receiving-Emails-using-node.js/blob/master/receiver.js
const Imap = require('imap');
const { inspect } = require('util');
const fs = require('fs');


const imap = new Imap({
    user: 'xxx@gmail.com',
    password: 'xxx',
    host: 'imap.gmail.com',
    port: 993,
    tls: true,
    tlsOptions: { rejectUnauthorized: false },
});
// Step 3: Program to receive emails.
/* This pretty much contains receiving emails, deciding which parts of email to receive,
and what do display on console after execution of program */
function openInbox(cb) {
    imap.openBox('INBOX', true, cb);
}

imap.once('ready', () => {
    openInbox((err, box) => {
        if (err) throw err;
        // Change the date with the one from which you want receive emails
        // Unseen means you'll only get mails that are unseen
        imap.search(['ALL', ['SINCE', 'July 27, 2021']], (err, results) => {
            if (err) throw err;
            const f = imap.fetch(results, { bodies: '' });
            f.on('message', (msg, seqno) => {
                console.log('Message #%d', seqno);
                const prefix = `(#${seqno}) `;
                msg.on('body', (stream, info) => {
                    console.log(`${prefix}Body`);
                    stream.pipe(fs.createWriteStream(`msg-${seqno}-body.txt`));
                });
                msg.once('attributes', (attrs) => {
                    console.log(`${prefix}Attributes: %s`, inspect(attrs, false, 8));
                });
                msg.once('end', () => {
                    console.log(`${prefix}Finished`);
                });
            });
            f.once('error', (err) => {
                console.log(`Fetch error: ${err}`);
            });
            f.once('end', () => {
                console.log('Done fetching all messages!');
                imap.end();
            });
        });
    });
});

imap.once('error', (err) => {
    console.log(err);
});

imap.once('end', () => {
    console.log('Connection ended');
});

imap.connect();
